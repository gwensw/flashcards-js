'use strict';var _slicedToArray=function(){function a(a,b){var c=[],d=!0,e=!1,f=void 0;try{for(var g,h=a[Symbol.iterator]();!(d=(g=h.next()).done)&&(c.push(g.value),!(b&&c.length===b));d=!0);}catch(a){e=!0,f=a}finally{try{!d&&h['return']&&h['return']()}finally{if(e)throw f}}return c}return function(b,c){if(Array.isArray(b))return b;if(Symbol.iterator in Object(b))return a(b,c);throw new TypeError('Invalid attempt to destructure non-iterable instance')}}();(function(a){var i=Math.round;/* --- HELPER METHODS & CONSTRUCTORS (INTERNAL) --- */function b(){return k.defaultDifficulty?k.defaultDifficulty:i((k.highestDifficulty-k.lowestDifficulty)/2)}// save the current deck to localStorage
function c(){l&&localStorage.setItem('deck-'+m,JSON.stringify(l))}// resets current session info and sets currentIndex to -1
function d(){n=-1,o.correct=0,o.incorrect=0,o.correctCards=[],o.incorrectCards=[],o.minDiff=k.lowestDifficulty,o.maxDiff=k.highestDifficulty}// return true if difficulty setting is a valid number
function e(a){return a!==void 0&&'number'==typeof a&&a<=k.highestDifficulty&&a>=k.lowestDifficulty}// returns the average difficulty of an array of cards
function f(a){if(!a.length)return null;var b=a.reduce(function(a,b){return{difficulty:parseInt(a.difficulty,10)+parseInt(b.difficulty,10)}}).difficulty;return i(b/a.length)}function g(a){this.name=a||'temp',this.displayName=a,this.cards=[]}function h(a){this.side1=Array.isArray(a.side1)?a.side1:[a.side1],this.side2=Array.isArray(a.side2)?a.side2:[a.side2],this.difficulty=a.difficulty===void 0?b():a.difficulty}/* --- API METHODS --- */// change the current deck
/* --- SETUP --- */// Create local library object
var j={},k={questionSide:'side1',// side shown as prompt
answerSide:'side2',// hidden side listing correct answer(s)
caseSensitive:!1,// should answer be checked for precise caps?
adjustDifficultyUp:1,adjustDifficultyDown:-1,lowestDifficulty:0,// lowest possible difficulty for cards
highestDifficulty:10// highest possible difficulty for cards
};/* --- SETTINGS (EXTERNAL) --- */// Exposed settings configuration object. Aliased.
j.settings=k;/* --- STORAGE (INTERNAL) --- */var l=!1,m=!1,n=-1,o={correct:0,incorrect:0,correctCards:[],incorrectCards:[],minDiff:!1,maxDiff:!1};// create a new card and add to the current deck
// creates one card per array on the current deck
// takes any number of arrays ([side1, side2, difficulty])
// edit any attribute of a card
// adds new acceptable answers to one side of a card
// delete a card at the given index in the current deck
// delete a deck from localstorage and set __currentDeck to false
// draw the card with the specified index
// draw the next card in the deck (if it falls within specified difficulty parameters)
// check if attempt is correct & change card difficulty up/down
// return the current card's answers and difficulty as an array, without affecting difficulty/progress
// randomly re-order the cards
// swap which card side is given as question, and which holds the answer
// return number of cards in open deck
// return info about current session
// manipulate session info values
// return array of decks in localStorage (along with name, displayName, no. of cards, average difficulty)
// give the deck a longform display name (optional)
// return the display name as a string (if display name is blank, return shortform name)
// for testing
/* --- DECLARE MODULE --- */// Declare 'flashcards' on the (global/window) object, i.e. 'this':
j.openDeck=function(a,b,c){if(!a)throw new TypeError('Must specify a deck name to open');null===localStorage.getItem('deck-'+a)&&localStorage.setItem('deck-'+a,JSON.stringify(new g(a))),l=JSON.parse(localStorage.getItem('deck-'+a)),m=a,d(),o.minDiff=e(b)?b:k.lowestDifficulty,o.maxDiff=e(c)?c:k.highestDifficulty},j.addCard=function(a,b,d){if(2>arguments.length||3<arguments.length)throw new TypeError('Cards must have exactly 2 sides');if(d&&!e(d))throw new TypeError('Difficulty must be a number between 0 and 1');l.cards.push(new h({difficulty:d,side1:a,side2:b})),c()},j.addCards=function(){for(var a=arguments.length,b=Array(a),d=0;d<a;d++)b[d]=arguments[d];for(var e=0;e<b.length;e+=1)if(Array.isArray(b[e])&&2<=b[e].length)this.addCard(b[e][0],b[e][1],b[e][2]);else throw l.cards.splice(l.cards.length-e,e+1),new TypeError('Each card array must contain data for exactly 2 card sides');c()},j.editCard=function(a,b,d){if(l.cards[a]===void 0)throw new TypeError('No card at that index');else if(3!==arguments.length)throw new TypeError('Must have three arguments');switch(b){case'side1':l.cards[a].side1=Array.isArray(d)?d:[d];break;case'side2':l.cards[a].side2=Array.isArray(d)?d:[d];break;case'difficulty':if(!e(d))throw new TypeError('Difficulty must be a number from 0 to 1');l.cards[a].difficulty=d;break;default:throw new TypeError('The second argument must be difficulty or a valid side');}c()},j.addToCard=function(a,b,d){if(l.cards[a][b]===void 0)throw new TypeError('Must choose a valid card and side');else if(3!==arguments.length)throw new TypeError('Must have three arguments');l.cards[a][b].push(d),c()},j.deleteCard=function(a){a!==void 0&&l.cards.splice(a,1),c()},j.deleteDeck=function(a){localStorage.removeItem('deck-'+a),a===m&&(l=!1)},j.draw=function(a){return n=a,!!l.cards[a]&&{question:l.cards[a][k.questionSide],difficulty:l.cards[a].difficulty}},j.drawNext=function(a,b){var c=e(a)?a:o.minDiff,d=e(b)?b:o.maxDiff,f=l.cards.length;if(0===f||n>=f-1)return!1;for(var g=0;g<f;g+=1){n+=1;var h=l.cards[n];if(!h)return!1;if(h.difficulty>=c&&h.difficulty<=d)return{question:h[k.questionSide],difficulty:h.difficulty}}return!1},j.checkAnswer=function(a){// check if attempt is correct
for(var b,d=!1,f=l.cards[n],g=f[k.answerSide],h=k.caseSensitive?a:a.toLowerCase(),j=0;j<g.length;j+=1)if(b=k.caseSensitive?g[j]:g[j].toLowerCase(),h===b){o.correct+=1,o.correctCards.push(n),d=!0;break}d||(o.incorrect+=1,o.incorrectCards.push(n));// calculate card's new difficulty
var m=f.difficulty;return m+=d?k.adjustDifficultyDown:k.adjustDifficultyUp,f.difficulty=e(m)?m:f.difficulty,c(),{outcome:d,newDifficulty:f.difficulty,answers:g}},j.revealAnswer=function(){return{answers:l.cards[n][k.answerSide],difficulty:l.cards[n].difficulty}},j.shuffle=function(){for(var a=l,b=a.cards,e=b.length-1;0<e;e-=1){var f=Math.floor(Math.random()*(e+1)),g=[b[f],b[e]];b[e]=g[0],b[f]=g[1]}// reset __currentIndex and session info
// take __currentDeck cards, reorder them (Durstenfeld Shuffle)
// save the current deck
d(),c()},j.flipDeck=function(){var a=k.questionSide;k.questionSide=k.answerSide,k.answerSide=a},j.deckLength=function(){return l.cards.length},j.getSessionInfo=function(){return o.currentIndex=n,o},j.setSessionInfo=function(a){var b=Number.isInteger;if(!b(a.correct)||!b(a.incorrect)||!Array.isArray(a.correctCards)||!Array.isArray(a.incorrectCards)||!b(a.currentIndex))throw new TypeError('Missing or illegal value for sessionInfo');else o.correct=a.correct,o.incorrect=a.incorrect,o.correctCards=a.correctCards,o.incorrectCards=a.incorrectCards,o.minDiff=e(a.minDiff)?a.minDiff:o.minDiff,o.maxDiff=e(a.maxDiff)?a.maxDiff:o.maxDiff,n=a.currentIndex},j.listDecks=function(){for(var a=[],b=localStorage.length,c=0;c<b;c+=1){// match and strip 'deck-' keys
var d=localStorage.key(c).match(/deck-(.*)/),e={};if(d){var g=JSON.parse(localStorage.getItem(d[0])),h=_slicedToArray(d,2);e.name=h[1],e.displayName=g.displayName,a.push(e),e.averageDifficulty=f(g.cards),e.cardLength=g.cards.length}}return a},j.setDisplayName=function(a){l.displayName=a.toString(),c()},j.getDisplayName=function(){return l.displayName.length?l.displayName:l.name},j.exposeDeck=function(){return l},a.flashcards=j})(window||module||{});
